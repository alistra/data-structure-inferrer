-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.2 from Il/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> exprlist                           (0)
	expr -> Name Assign valexpr                        (1)
	expr -> Name Assign DS                             (2)
	expr -> block                                      (3)
	expr -> If valexpr Then expr Else expr             (4)
	expr -> If valexpr Newline Then expr Newline Else expr   (5)
	expr -> For LParen expr Semicolon valexpr Semicolon expr RParen expr   (6)
	expr -> For LParen expr Semicolon valexpr Semicolon expr RParen Newline expr   (7)
	expr -> While LParen valexpr RParen expr           (8)
	expr -> While LParen valexpr RParen Newline expr   (9)
	expr -> shexpr                                     (10)
	shexpr -> Inc Name                                 (11)
	shexpr -> Name Inc                                 (12)
	shexpr -> Dec Name                                 (13)
	shexpr -> Name Dec                                 (14)
	shexpr -> Name LParen commaseparatedlist RParen    (15)
	valexpr -> Name                                    (16)
	valexpr -> Null                                    (17)
	valexpr -> Int                                     (18)
	valexpr -> False                                   (19)
	valexpr -> True                                    (20)
	valexpr -> Not valexpr                             (21)
	valexpr -> valexpr And valexpr                     (22)
	valexpr -> valexpr Or valexpr                      (23)
	valexpr -> valexpr Plus valexpr                    (24)
	valexpr -> valexpr Minus valexpr                   (25)
	valexpr -> valexpr Mul valexpr                     (26)
	valexpr -> valexpr Div valexpr                     (27)
	valexpr -> valexpr Equals valexpr                  (28)
	valexpr -> valexpr LEqual valexpr                  (29)
	valexpr -> valexpr GEqual valexpr                  (30)
	valexpr -> valexpr Greater valexpr                 (31)
	valexpr -> valexpr Less valexpr                    (32)
	valexpr -> LParen valexpr RParen                   (33)
	valexpr -> shexpr                                  (34)
	block -> LCParen Newline exprlist RCParen          (35)
	block -> LCParen exprlist RCParen                  (36)
	block -> LCParen RCParen                           (37)
	block -> LCParen Newline RCParen                   (38)
	exprlist -> block exprlist                         (39)
	exprlist -> expr Newline exprlist                  (40)
	exprlist -> expr Newline                           (41)
	exprlist -> expr                                   (42)
	commaseparatedlist -> valexpr Comma commaseparatedlist   (43)
	commaseparatedlist -> valexpr                      (44)
	commaseparatedlist ->                              (45)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	And            { (_,TkAnd) }
	Assign         { (_,TkAssign) }
	Comma          { (_,TkComma) }
	Dec            { (_,TkDec) }
	Div            { (_,TkDiv) }
	DS             { (_,TkDS) }
	Else           { (_,TkElse) }
	Equals         { (_,TkEquals) }
	False          { (_,TkFalse) }
	For            { (_,TkFor) }
	GEqual         { (_,TkGEqual) }
	Greater        { (_,TkGreater) }
	If             { (_,TkIf) }
	Inc            { (_,TkInc) }
	Int            { (_,TkInt $$) }
	LCParen        { (_,TkLCParen) }
	LEqual         { (_,TkLEqual) }
	Less           { (_,TkLess) }
	LParen         { (_,TkLParen) }
	Minus          { (_,TkMinus) }
	Mul            { (_,TkMul) }
	Name           { (_,TkName $$) }
	Newline        { (_,TkNewline) }
	Not            { (_,TkNot) }
	Null           { (_,TkNull) }
	Or             { (_,TkOr) }
	Plus           { (_,TkPlus) }
	RCParen        { (_,TkRCParen) }
	RParen         { (_,TkRParen) }
	Semicolon      { (_,TkSemicolon) }
	Then           { (_,TkThen) }
	True           { (_,TkTrue) }
	While          { (_,TkWhile) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
	shexpr          rules 11, 12, 13, 14, 15
	valexpr         rules 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34
	block           rules 35, 36, 37, 38
	exprlist        rules 39, 40, 41, 42
	commaseparatedlist rules 43, 44, 45

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 3
	shexpr         goto state 4
	block          goto state 5
	exprlist       goto state 6

State 1


	Name           shift, and enter state 2


State 2

	expr -> Name . Assign valexpr                       (rule 1)

	Assign         shift, and enter state 36


State 3

	exprlist -> expr . Newline exprlist                 (rule 40)
	exprlist -> expr . Newline                          (rule 41)
	exprlist -> expr .                                  (rule 42)

	Newline        shift, and enter state 35
	RCParen        reduce using rule 42
	%eof           reduce using rule 42


State 4

	expr -> shexpr .                                    (rule 10)

	Else           reduce using rule 10
	Newline        reduce using rule 10
	RCParen        reduce using rule 10
	RParen         reduce using rule 10
	Semicolon      reduce using rule 10
	%eof           reduce using rule 10


State 5

	expr -> block .                                     (rule 3)
	exprlist -> block . exprlist                        (rule 39)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	Newline        reduce using rule 3
	RCParen        reduce using rule 3
	While          shift, and enter state 13
	%eof           reduce using rule 3

	expr           goto state 3
	shexpr         goto state 4
	block          goto state 5
	exprlist       goto state 34

State 6

	%start_parse -> exprlist .                          (rule 0)

	%eof           accept


State 7

	shexpr -> Dec . Name                                (rule 13)

	Name           shift, and enter state 33


State 8

	expr -> For . LParen expr Semicolon valexpr Semicolon expr RParen expr    (rule 6)
	expr -> For . LParen expr Semicolon valexpr Semicolon expr RParen Newline expr    (rule 7)

	LParen         shift, and enter state 32


State 9

	expr -> If . valexpr Then expr Else expr            (rule 4)
	expr -> If . valexpr Newline Then expr Newline Else expr    (rule 5)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 24

State 10

	shexpr -> Inc . Name                                (rule 11)

	Name           shift, and enter state 22


State 11

	block -> LCParen . Newline exprlist RCParen         (rule 35)
	block -> LCParen . exprlist RCParen                 (rule 36)
	block -> LCParen . RCParen                          (rule 37)
	block -> LCParen . Newline RCParen                  (rule 38)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	Newline        shift, and enter state 20
	RCParen        shift, and enter state 21
	While          shift, and enter state 13

	expr           goto state 3
	shexpr         goto state 4
	block          goto state 5
	exprlist       goto state 19

State 12

	expr -> Name . Assign valexpr                       (rule 1)
	expr -> Name . Assign DS                            (rule 2)
	shexpr -> Name . Inc                                (rule 12)
	shexpr -> Name . Dec                                (rule 14)
	shexpr -> Name . LParen commaseparatedlist RParen    (rule 15)

	Assign         shift, and enter state 15
	Dec            shift, and enter state 16
	Inc            shift, and enter state 17
	LParen         shift, and enter state 18


State 13

	expr -> While . LParen valexpr RParen expr          (rule 8)
	expr -> While . LParen valexpr RParen Newline expr    (rule 9)

	LParen         shift, and enter state 14


State 14

	expr -> While LParen . valexpr RParen expr          (rule 8)
	expr -> While LParen . valexpr RParen Newline expr    (rule 9)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 62

State 15

	expr -> Name Assign . valexpr                       (rule 1)
	expr -> Name Assign . DS                            (rule 2)

	Dec            shift, and enter state 7
	DS             shift, and enter state 61
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 37

State 16

	shexpr -> Name Dec .                                (rule 14)

	And            reduce using rule 14
	Comma          reduce using rule 14
	Div            reduce using rule 14
	Else           reduce using rule 14
	Equals         reduce using rule 14
	GEqual         reduce using rule 14
	Greater        reduce using rule 14
	LEqual         reduce using rule 14
	Less           reduce using rule 14
	Minus          reduce using rule 14
	Mul            reduce using rule 14
	Newline        reduce using rule 14
	Or             reduce using rule 14
	Plus           reduce using rule 14
	RCParen        reduce using rule 14
	RParen         reduce using rule 14
	Semicolon      reduce using rule 14
	Then           reduce using rule 14
	%eof           reduce using rule 14


State 17

	shexpr -> Name Inc .                                (rule 12)

	And            reduce using rule 12
	Comma          reduce using rule 12
	Div            reduce using rule 12
	Else           reduce using rule 12
	Equals         reduce using rule 12
	GEqual         reduce using rule 12
	Greater        reduce using rule 12
	LEqual         reduce using rule 12
	Less           reduce using rule 12
	Minus          reduce using rule 12
	Mul            reduce using rule 12
	Newline        reduce using rule 12
	Or             reduce using rule 12
	Plus           reduce using rule 12
	RCParen        reduce using rule 12
	RParen         reduce using rule 12
	Semicolon      reduce using rule 12
	Then           reduce using rule 12
	%eof           reduce using rule 12


State 18

	shexpr -> Name LParen . commaseparatedlist RParen    (rule 15)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	RParen         reduce using rule 45
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 59
	commaseparatedlistgoto state 60

State 19

	block -> LCParen exprlist . RCParen                 (rule 36)

	RCParen        shift, and enter state 58


State 20

	block -> LCParen Newline . exprlist RCParen         (rule 35)
	block -> LCParen Newline . RCParen                  (rule 38)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	RCParen        shift, and enter state 57
	While          shift, and enter state 13

	expr           goto state 3
	shexpr         goto state 4
	block          goto state 5
	exprlist       goto state 56

State 21

	block -> LCParen RCParen .                          (rule 37)

	Dec            reduce using rule 37
	Else           reduce using rule 37
	For            reduce using rule 37
	If             reduce using rule 37
	Inc            reduce using rule 37
	LCParen        reduce using rule 37
	Name           reduce using rule 37
	Newline        reduce using rule 37
	RCParen        reduce using rule 37
	RParen         reduce using rule 37
	Semicolon      reduce using rule 37
	While          reduce using rule 37
	%eof           reduce using rule 37


State 22

	shexpr -> Inc Name .                                (rule 11)

	And            reduce using rule 11
	Comma          reduce using rule 11
	Div            reduce using rule 11
	Else           reduce using rule 11
	Equals         reduce using rule 11
	GEqual         reduce using rule 11
	Greater        reduce using rule 11
	LEqual         reduce using rule 11
	Less           reduce using rule 11
	Minus          reduce using rule 11
	Mul            reduce using rule 11
	Newline        reduce using rule 11
	Or             reduce using rule 11
	Plus           reduce using rule 11
	RCParen        reduce using rule 11
	RParen         reduce using rule 11
	Semicolon      reduce using rule 11
	Then           reduce using rule 11
	%eof           reduce using rule 11


State 23

	valexpr -> shexpr .                                 (rule 34)

	And            reduce using rule 34
	Comma          reduce using rule 34
	Div            reduce using rule 34
	Else           reduce using rule 34
	Equals         reduce using rule 34
	GEqual         reduce using rule 34
	Greater        reduce using rule 34
	LEqual         reduce using rule 34
	Less           reduce using rule 34
	Minus          reduce using rule 34
	Mul            reduce using rule 34
	Newline        reduce using rule 34
	Or             reduce using rule 34
	Plus           reduce using rule 34
	RCParen        reduce using rule 34
	RParen         reduce using rule 34
	Semicolon      reduce using rule 34
	Then           reduce using rule 34
	%eof           reduce using rule 34


State 24

	expr -> If valexpr . Then expr Else expr            (rule 4)
	expr -> If valexpr . Newline Then expr Newline Else expr    (rule 5)
	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            shift, and enter state 43
	Div            shift, and enter state 44
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        shift, and enter state 52
	Or             shift, and enter state 53
	Plus           shift, and enter state 54
	Then           shift, and enter state 55


State 25

	valexpr -> False .                                  (rule 19)

	And            reduce using rule 19
	Comma          reduce using rule 19
	Div            reduce using rule 19
	Else           reduce using rule 19
	Equals         reduce using rule 19
	GEqual         reduce using rule 19
	Greater        reduce using rule 19
	LEqual         reduce using rule 19
	Less           reduce using rule 19
	Minus          reduce using rule 19
	Mul            reduce using rule 19
	Newline        reduce using rule 19
	Or             reduce using rule 19
	Plus           reduce using rule 19
	RCParen        reduce using rule 19
	RParen         reduce using rule 19
	Semicolon      reduce using rule 19
	Then           reduce using rule 19
	%eof           reduce using rule 19


State 26

	valexpr -> Int .                                    (rule 18)

	And            reduce using rule 18
	Comma          reduce using rule 18
	Div            reduce using rule 18
	Else           reduce using rule 18
	Equals         reduce using rule 18
	GEqual         reduce using rule 18
	Greater        reduce using rule 18
	LEqual         reduce using rule 18
	Less           reduce using rule 18
	Minus          reduce using rule 18
	Mul            reduce using rule 18
	Newline        reduce using rule 18
	Or             reduce using rule 18
	Plus           reduce using rule 18
	RCParen        reduce using rule 18
	RParen         reduce using rule 18
	Semicolon      reduce using rule 18
	Then           reduce using rule 18
	%eof           reduce using rule 18


State 27

	valexpr -> LParen . valexpr RParen                  (rule 33)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 42

State 28

	shexpr -> Name . Inc                                (rule 12)
	shexpr -> Name . Dec                                (rule 14)
	shexpr -> Name . LParen commaseparatedlist RParen    (rule 15)
	valexpr -> Name .                                   (rule 16)

	And            reduce using rule 16
	Comma          reduce using rule 16
	Dec            shift, and enter state 16
	Div            reduce using rule 16
	Else           reduce using rule 16
	Equals         reduce using rule 16
	GEqual         reduce using rule 16
	Greater        reduce using rule 16
	Inc            shift, and enter state 17
	LEqual         reduce using rule 16
	Less           reduce using rule 16
	LParen         shift, and enter state 18
	Minus          reduce using rule 16
	Mul            reduce using rule 16
	Newline        reduce using rule 16
	Or             reduce using rule 16
	Plus           reduce using rule 16
	RCParen        reduce using rule 16
	RParen         reduce using rule 16
	Semicolon      reduce using rule 16
	Then           reduce using rule 16
	%eof           reduce using rule 16


State 29

	valexpr -> Not . valexpr                            (rule 21)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 41

State 30

	valexpr -> Null .                                   (rule 17)

	And            reduce using rule 17
	Comma          reduce using rule 17
	Div            reduce using rule 17
	Else           reduce using rule 17
	Equals         reduce using rule 17
	GEqual         reduce using rule 17
	Greater        reduce using rule 17
	LEqual         reduce using rule 17
	Less           reduce using rule 17
	Minus          reduce using rule 17
	Mul            reduce using rule 17
	Newline        reduce using rule 17
	Or             reduce using rule 17
	Plus           reduce using rule 17
	RCParen        reduce using rule 17
	RParen         reduce using rule 17
	Semicolon      reduce using rule 17
	Then           reduce using rule 17
	%eof           reduce using rule 17


State 31

	valexpr -> True .                                   (rule 20)

	And            reduce using rule 20
	Comma          reduce using rule 20
	Div            reduce using rule 20
	Else           reduce using rule 20
	Equals         reduce using rule 20
	GEqual         reduce using rule 20
	Greater        reduce using rule 20
	LEqual         reduce using rule 20
	Less           reduce using rule 20
	Minus          reduce using rule 20
	Mul            reduce using rule 20
	Newline        reduce using rule 20
	Or             reduce using rule 20
	Plus           reduce using rule 20
	RCParen        reduce using rule 20
	RParen         reduce using rule 20
	Semicolon      reduce using rule 20
	Then           reduce using rule 20
	%eof           reduce using rule 20


State 32

	expr -> For LParen . expr Semicolon valexpr Semicolon expr RParen expr    (rule 6)
	expr -> For LParen . expr Semicolon valexpr Semicolon expr RParen Newline expr    (rule 7)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 39
	shexpr         goto state 4
	block          goto state 40

State 33

	shexpr -> Dec Name .                                (rule 13)

	And            reduce using rule 13
	Comma          reduce using rule 13
	Div            reduce using rule 13
	Else           reduce using rule 13
	Equals         reduce using rule 13
	GEqual         reduce using rule 13
	Greater        reduce using rule 13
	LEqual         reduce using rule 13
	Less           reduce using rule 13
	Minus          reduce using rule 13
	Mul            reduce using rule 13
	Newline        reduce using rule 13
	Or             reduce using rule 13
	Plus           reduce using rule 13
	RCParen        reduce using rule 13
	RParen         reduce using rule 13
	Semicolon      reduce using rule 13
	Then           reduce using rule 13
	%eof           reduce using rule 13


State 34

	exprlist -> block exprlist .                        (rule 39)

	RCParen        reduce using rule 39
	%eof           reduce using rule 39


State 35

	exprlist -> expr Newline . exprlist                 (rule 40)
	exprlist -> expr Newline .                          (rule 41)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	RCParen        reduce using rule 41
	While          shift, and enter state 13
	%eof           reduce using rule 41

	expr           goto state 3
	shexpr         goto state 4
	block          goto state 5
	exprlist       goto state 38

State 36

	expr -> Name Assign . valexpr                       (rule 1)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 37

State 37

	expr -> Name Assign valexpr .                       (rule 1)
	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            shift, and enter state 43
	Div            shift, and enter state 44
	Else           reduce using rule 1
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 1
	Or             shift, and enter state 53
	Plus           shift, and enter state 54
	RCParen        reduce using rule 1
	RParen         reduce using rule 1
	Semicolon      reduce using rule 1
	%eof           reduce using rule 1


State 38

	exprlist -> expr Newline exprlist .                 (rule 40)

	RCParen        reduce using rule 40
	%eof           reduce using rule 40


State 39

	expr -> For LParen expr . Semicolon valexpr Semicolon expr RParen expr    (rule 6)
	expr -> For LParen expr . Semicolon valexpr Semicolon expr RParen Newline expr    (rule 7)

	Semicolon      shift, and enter state 81


State 40

	expr -> block .                                     (rule 3)

	Else           reduce using rule 3
	Newline        reduce using rule 3
	RCParen        reduce using rule 3
	RParen         reduce using rule 3
	Semicolon      reduce using rule 3
	%eof           reduce using rule 3


State 41

	valexpr -> Not valexpr .                            (rule 21)
	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            shift, and enter state 43
	Comma          reduce using rule 21
	Div            shift, and enter state 44
	Else           reduce using rule 21
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 21
	Or             shift, and enter state 53
	Plus           shift, and enter state 54
	RCParen        reduce using rule 21
	RParen         reduce using rule 21
	Semicolon      reduce using rule 21
	Then           reduce using rule 21
	%eof           reduce using rule 21


State 42

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)
	valexpr -> LParen valexpr . RParen                  (rule 33)

	And            shift, and enter state 43
	Div            shift, and enter state 44
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Or             shift, and enter state 53
	Plus           shift, and enter state 54
	RParen         shift, and enter state 80


State 43

	valexpr -> valexpr And . valexpr                    (rule 22)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 79

State 44

	valexpr -> valexpr Div . valexpr                    (rule 27)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 78

State 45

	valexpr -> valexpr Equals . valexpr                 (rule 28)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 77

State 46

	valexpr -> valexpr GEqual . valexpr                 (rule 30)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 76

State 47

	valexpr -> valexpr Greater . valexpr                (rule 31)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 75

State 48

	valexpr -> valexpr LEqual . valexpr                 (rule 29)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 74

State 49

	valexpr -> valexpr Less . valexpr                   (rule 32)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 73

State 50

	valexpr -> valexpr Minus . valexpr                  (rule 25)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 72

State 51

	valexpr -> valexpr Mul . valexpr                    (rule 26)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 71

State 52

	expr -> If valexpr Newline . Then expr Newline Else expr    (rule 5)

	Then           shift, and enter state 70


State 53

	valexpr -> valexpr Or . valexpr                     (rule 23)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 69

State 54

	valexpr -> valexpr Plus . valexpr                   (rule 24)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 68

State 55

	expr -> If valexpr Then . expr Else expr            (rule 4)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 67
	shexpr         goto state 4
	block          goto state 40

State 56

	block -> LCParen Newline exprlist . RCParen         (rule 35)

	RCParen        shift, and enter state 66


State 57

	block -> LCParen Newline RCParen .                  (rule 38)

	Dec            reduce using rule 38
	Else           reduce using rule 38
	For            reduce using rule 38
	If             reduce using rule 38
	Inc            reduce using rule 38
	LCParen        reduce using rule 38
	Name           reduce using rule 38
	Newline        reduce using rule 38
	RCParen        reduce using rule 38
	RParen         reduce using rule 38
	Semicolon      reduce using rule 38
	While          reduce using rule 38
	%eof           reduce using rule 38


State 58

	block -> LCParen exprlist RCParen .                 (rule 36)

	Dec            reduce using rule 36
	Else           reduce using rule 36
	For            reduce using rule 36
	If             reduce using rule 36
	Inc            reduce using rule 36
	LCParen        reduce using rule 36
	Name           reduce using rule 36
	Newline        reduce using rule 36
	RCParen        reduce using rule 36
	RParen         reduce using rule 36
	Semicolon      reduce using rule 36
	While          reduce using rule 36
	%eof           reduce using rule 36


State 59

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)
	commaseparatedlist -> valexpr . Comma commaseparatedlist    (rule 43)
	commaseparatedlist -> valexpr .                     (rule 44)

	And            shift, and enter state 43
	Comma          shift, and enter state 65
	Div            shift, and enter state 44
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Or             shift, and enter state 53
	Plus           shift, and enter state 54
	RParen         reduce using rule 44


State 60

	shexpr -> Name LParen commaseparatedlist . RParen    (rule 15)

	RParen         shift, and enter state 64


State 61

	expr -> Name Assign DS .                            (rule 2)

	Else           reduce using rule 2
	Newline        reduce using rule 2
	RCParen        reduce using rule 2
	RParen         reduce using rule 2
	Semicolon      reduce using rule 2
	%eof           reduce using rule 2


State 62

	expr -> While LParen valexpr . RParen expr          (rule 8)
	expr -> While LParen valexpr . RParen Newline expr    (rule 9)
	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            shift, and enter state 43
	Div            shift, and enter state 44
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Or             shift, and enter state 53
	Plus           shift, and enter state 54
	RParen         shift, and enter state 63


State 63

	expr -> While LParen valexpr RParen . expr          (rule 8)
	expr -> While LParen valexpr RParen . Newline expr    (rule 9)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	Newline        shift, and enter state 87
	While          shift, and enter state 13

	expr           goto state 86
	shexpr         goto state 4
	block          goto state 40

State 64

	shexpr -> Name LParen commaseparatedlist RParen .    (rule 15)

	And            reduce using rule 15
	Comma          reduce using rule 15
	Div            reduce using rule 15
	Else           reduce using rule 15
	Equals         reduce using rule 15
	GEqual         reduce using rule 15
	Greater        reduce using rule 15
	LEqual         reduce using rule 15
	Less           reduce using rule 15
	Minus          reduce using rule 15
	Mul            reduce using rule 15
	Newline        reduce using rule 15
	Or             reduce using rule 15
	Plus           reduce using rule 15
	RCParen        reduce using rule 15
	RParen         reduce using rule 15
	Semicolon      reduce using rule 15
	Then           reduce using rule 15
	%eof           reduce using rule 15


State 65

	commaseparatedlist -> valexpr Comma . commaseparatedlist    (rule 43)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	RParen         reduce using rule 45
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 59
	commaseparatedlistgoto state 85

State 66

	block -> LCParen Newline exprlist RCParen .         (rule 35)

	Dec            reduce using rule 35
	Else           reduce using rule 35
	For            reduce using rule 35
	If             reduce using rule 35
	Inc            reduce using rule 35
	LCParen        reduce using rule 35
	Name           reduce using rule 35
	Newline        reduce using rule 35
	RCParen        reduce using rule 35
	RParen         reduce using rule 35
	Semicolon      reduce using rule 35
	While          reduce using rule 35
	%eof           reduce using rule 35


State 67

	expr -> If valexpr Then expr . Else expr            (rule 4)

	Else           shift, and enter state 84


State 68

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr Plus valexpr .                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 24
	Comma          reduce using rule 24
	Div            shift, and enter state 44
	Else           reduce using rule 24
	Equals         reduce using rule 24
	GEqual         reduce using rule 24
	Greater        reduce using rule 24
	LEqual         reduce using rule 24
	Less           reduce using rule 24
	Minus          reduce using rule 24
	Mul            shift, and enter state 51
	Newline        reduce using rule 24
	Or             reduce using rule 24
	Plus           reduce using rule 24
	RCParen        reduce using rule 24
	RParen         reduce using rule 24
	Semicolon      reduce using rule 24
	Then           reduce using rule 24
	%eof           reduce using rule 24


State 69

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr Or valexpr .                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 23
	Comma          reduce using rule 23
	Div            shift, and enter state 44
	Else           reduce using rule 23
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 23
	Or             reduce using rule 23
	Plus           shift, and enter state 54
	RCParen        reduce using rule 23
	RParen         reduce using rule 23
	Semicolon      reduce using rule 23
	Then           reduce using rule 23
	%eof           reduce using rule 23


State 70

	expr -> If valexpr Newline Then . expr Newline Else expr    (rule 5)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 83
	shexpr         goto state 4
	block          goto state 40

State 71

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr Mul valexpr .                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 26
	Comma          reduce using rule 26
	Div            reduce using rule 26
	Else           reduce using rule 26
	Equals         reduce using rule 26
	GEqual         reduce using rule 26
	Greater        reduce using rule 26
	LEqual         reduce using rule 26
	Less           reduce using rule 26
	Minus          reduce using rule 26
	Mul            reduce using rule 26
	Newline        reduce using rule 26
	Or             reduce using rule 26
	Plus           reduce using rule 26
	RCParen        reduce using rule 26
	RParen         reduce using rule 26
	Semicolon      reduce using rule 26
	Then           reduce using rule 26
	%eof           reduce using rule 26


State 72

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr Minus valexpr .                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 25
	Comma          reduce using rule 25
	Div            shift, and enter state 44
	Else           reduce using rule 25
	Equals         reduce using rule 25
	GEqual         reduce using rule 25
	Greater        reduce using rule 25
	LEqual         reduce using rule 25
	Less           reduce using rule 25
	Minus          reduce using rule 25
	Mul            shift, and enter state 51
	Newline        reduce using rule 25
	Or             reduce using rule 25
	Plus           reduce using rule 25
	RCParen        reduce using rule 25
	RParen         reduce using rule 25
	Semicolon      reduce using rule 25
	Then           reduce using rule 25
	%eof           reduce using rule 25


State 73

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)
	valexpr -> valexpr Less valexpr .                   (rule 32)

	And            reduce using rule 32
	Comma          reduce using rule 32
	Div            shift, and enter state 44
	Else           reduce using rule 32
	Equals         fail
	GEqual         fail
	Greater        fail
	LEqual         fail
	Less           fail
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 32
	Or             reduce using rule 32
	Plus           shift, and enter state 54
	RCParen        reduce using rule 32
	RParen         reduce using rule 32
	Semicolon      reduce using rule 32
	Then           reduce using rule 32
	%eof           reduce using rule 32


State 74

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr LEqual valexpr .                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 29
	Comma          reduce using rule 29
	Div            shift, and enter state 44
	Else           reduce using rule 29
	Equals         fail
	GEqual         fail
	Greater        fail
	LEqual         fail
	Less           fail
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 29
	Or             reduce using rule 29
	Plus           shift, and enter state 54
	RCParen        reduce using rule 29
	RParen         reduce using rule 29
	Semicolon      reduce using rule 29
	Then           reduce using rule 29
	%eof           reduce using rule 29


State 75

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr Greater valexpr .                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 31
	Comma          reduce using rule 31
	Div            shift, and enter state 44
	Else           reduce using rule 31
	Equals         fail
	GEqual         fail
	Greater        fail
	LEqual         fail
	Less           fail
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 31
	Or             reduce using rule 31
	Plus           shift, and enter state 54
	RCParen        reduce using rule 31
	RParen         reduce using rule 31
	Semicolon      reduce using rule 31
	Then           reduce using rule 31
	%eof           reduce using rule 31


State 76

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr GEqual valexpr .                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 30
	Comma          reduce using rule 30
	Div            shift, and enter state 44
	Else           reduce using rule 30
	Equals         fail
	GEqual         fail
	Greater        fail
	LEqual         fail
	Less           fail
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 30
	Or             reduce using rule 30
	Plus           shift, and enter state 54
	RCParen        reduce using rule 30
	RParen         reduce using rule 30
	Semicolon      reduce using rule 30
	Then           reduce using rule 30
	%eof           reduce using rule 30


State 77

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr Equals valexpr .                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 28
	Comma          reduce using rule 28
	Div            shift, and enter state 44
	Else           reduce using rule 28
	Equals         fail
	GEqual         fail
	Greater        fail
	LEqual         fail
	Less           fail
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 28
	Or             reduce using rule 28
	Plus           shift, and enter state 54
	RCParen        reduce using rule 28
	RParen         reduce using rule 28
	Semicolon      reduce using rule 28
	Then           reduce using rule 28
	%eof           reduce using rule 28


State 78

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr Div valexpr .                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 27
	Comma          reduce using rule 27
	Div            reduce using rule 27
	Else           reduce using rule 27
	Equals         reduce using rule 27
	GEqual         reduce using rule 27
	Greater        reduce using rule 27
	LEqual         reduce using rule 27
	Less           reduce using rule 27
	Minus          reduce using rule 27
	Mul            reduce using rule 27
	Newline        reduce using rule 27
	Or             reduce using rule 27
	Plus           reduce using rule 27
	RCParen        reduce using rule 27
	RParen         reduce using rule 27
	Semicolon      reduce using rule 27
	Then           reduce using rule 27
	%eof           reduce using rule 27


State 79

	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr And valexpr .                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            reduce using rule 22
	Comma          reduce using rule 22
	Div            shift, and enter state 44
	Else           reduce using rule 22
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Newline        reduce using rule 22
	Or             reduce using rule 22
	Plus           shift, and enter state 54
	RCParen        reduce using rule 22
	RParen         reduce using rule 22
	Semicolon      reduce using rule 22
	Then           reduce using rule 22
	%eof           reduce using rule 22


State 80

	valexpr -> LParen valexpr RParen .                  (rule 33)

	And            reduce using rule 33
	Comma          reduce using rule 33
	Div            reduce using rule 33
	Else           reduce using rule 33
	Equals         reduce using rule 33
	GEqual         reduce using rule 33
	Greater        reduce using rule 33
	LEqual         reduce using rule 33
	Less           reduce using rule 33
	Minus          reduce using rule 33
	Mul            reduce using rule 33
	Newline        reduce using rule 33
	Or             reduce using rule 33
	Plus           reduce using rule 33
	RCParen        reduce using rule 33
	RParen         reduce using rule 33
	Semicolon      reduce using rule 33
	Then           reduce using rule 33
	%eof           reduce using rule 33


State 81

	expr -> For LParen expr Semicolon . valexpr Semicolon expr RParen expr    (rule 6)
	expr -> For LParen expr Semicolon . valexpr Semicolon expr RParen Newline expr    (rule 7)

	Dec            shift, and enter state 7
	False          shift, and enter state 25
	Inc            shift, and enter state 10
	Int            shift, and enter state 26
	LParen         shift, and enter state 27
	Name           shift, and enter state 28
	Not            shift, and enter state 29
	Null           shift, and enter state 30
	True           shift, and enter state 31

	shexpr         goto state 23
	valexpr        goto state 82

State 82

	expr -> For LParen expr Semicolon valexpr . Semicolon expr RParen expr    (rule 6)
	expr -> For LParen expr Semicolon valexpr . Semicolon expr RParen Newline expr    (rule 7)
	valexpr -> valexpr . And valexpr                    (rule 22)
	valexpr -> valexpr . Or valexpr                     (rule 23)
	valexpr -> valexpr . Plus valexpr                   (rule 24)
	valexpr -> valexpr . Minus valexpr                  (rule 25)
	valexpr -> valexpr . Mul valexpr                    (rule 26)
	valexpr -> valexpr . Div valexpr                    (rule 27)
	valexpr -> valexpr . Equals valexpr                 (rule 28)
	valexpr -> valexpr . LEqual valexpr                 (rule 29)
	valexpr -> valexpr . GEqual valexpr                 (rule 30)
	valexpr -> valexpr . Greater valexpr                (rule 31)
	valexpr -> valexpr . Less valexpr                   (rule 32)

	And            shift, and enter state 43
	Div            shift, and enter state 44
	Equals         shift, and enter state 45
	GEqual         shift, and enter state 46
	Greater        shift, and enter state 47
	LEqual         shift, and enter state 48
	Less           shift, and enter state 49
	Minus          shift, and enter state 50
	Mul            shift, and enter state 51
	Or             shift, and enter state 53
	Plus           shift, and enter state 54
	Semicolon      shift, and enter state 91


State 83

	expr -> If valexpr Newline Then expr . Newline Else expr    (rule 5)

	Newline        shift, and enter state 90


State 84

	expr -> If valexpr Then expr Else . expr            (rule 4)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 89
	shexpr         goto state 4
	block          goto state 40

State 85

	commaseparatedlist -> valexpr Comma commaseparatedlist .    (rule 43)

	RParen         reduce using rule 43


State 86

	expr -> While LParen valexpr RParen expr .          (rule 8)

	Else           reduce using rule 8
	Newline        reduce using rule 8
	RCParen        reduce using rule 8
	RParen         reduce using rule 8
	Semicolon      reduce using rule 8
	%eof           reduce using rule 8


State 87

	expr -> While LParen valexpr RParen Newline . expr    (rule 9)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 88
	shexpr         goto state 4
	block          goto state 40

State 88

	expr -> While LParen valexpr RParen Newline expr .    (rule 9)

	Else           reduce using rule 9
	Newline        reduce using rule 9
	RCParen        reduce using rule 9
	RParen         reduce using rule 9
	Semicolon      reduce using rule 9
	%eof           reduce using rule 9


State 89

	expr -> If valexpr Then expr Else expr .            (rule 4)

	Else           reduce using rule 4
	Newline        reduce using rule 4
	RCParen        reduce using rule 4
	RParen         reduce using rule 4
	Semicolon      reduce using rule 4
	%eof           reduce using rule 4


State 90

	expr -> If valexpr Newline Then expr Newline . Else expr    (rule 5)

	Else           shift, and enter state 93


State 91

	expr -> For LParen expr Semicolon valexpr Semicolon . expr RParen expr    (rule 6)
	expr -> For LParen expr Semicolon valexpr Semicolon . expr RParen Newline expr    (rule 7)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 92
	shexpr         goto state 4
	block          goto state 40

State 92

	expr -> For LParen expr Semicolon valexpr Semicolon expr . RParen expr    (rule 6)
	expr -> For LParen expr Semicolon valexpr Semicolon expr . RParen Newline expr    (rule 7)

	RParen         shift, and enter state 95


State 93

	expr -> If valexpr Newline Then expr Newline Else . expr    (rule 5)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 94
	shexpr         goto state 4
	block          goto state 40

State 94

	expr -> If valexpr Newline Then expr Newline Else expr .    (rule 5)

	Else           reduce using rule 5
	Newline        reduce using rule 5
	RCParen        reduce using rule 5
	RParen         reduce using rule 5
	Semicolon      reduce using rule 5
	%eof           reduce using rule 5


State 95

	expr -> For LParen expr Semicolon valexpr Semicolon expr RParen . expr    (rule 6)
	expr -> For LParen expr Semicolon valexpr Semicolon expr RParen . Newline expr    (rule 7)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	Newline        shift, and enter state 97
	While          shift, and enter state 13

	expr           goto state 96
	shexpr         goto state 4
	block          goto state 40

State 96

	expr -> For LParen expr Semicolon valexpr Semicolon expr RParen expr .    (rule 6)

	Else           reduce using rule 6
	Newline        reduce using rule 6
	RCParen        reduce using rule 6
	RParen         reduce using rule 6
	Semicolon      reduce using rule 6
	%eof           reduce using rule 6


State 97

	expr -> For LParen expr Semicolon valexpr Semicolon expr RParen Newline . expr    (rule 7)

	Dec            shift, and enter state 7
	For            shift, and enter state 8
	If             shift, and enter state 9
	Inc            shift, and enter state 10
	LCParen        shift, and enter state 11
	Name           shift, and enter state 12
	While          shift, and enter state 13

	expr           goto state 98
	shexpr         goto state 4
	block          goto state 40

State 98

	expr -> For LParen expr Semicolon valexpr Semicolon expr RParen Newline expr .    (rule 7)

	Else           reduce using rule 7
	Newline        reduce using rule 7
	RCParen        reduce using rule 7
	RParen         reduce using rule 7
	Semicolon      reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 46
Number of terminals: 33
Number of non-terminals: 7
Number of states: 99
